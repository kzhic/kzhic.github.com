<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>CentOS7.3上安装docker</title>
    <url>/2019/04/20/CentOS7.3%E4%B8%8A%E5%AE%89%E8%A3%85docker/</url>
    <content><![CDATA[<p>[TOC]</p>
<h4 id="概要"><a href="#概要" class="headerlink" title="概要"></a>概要</h4><p>一直想着在腾讯云上的docker中安装MySQL,用于自己平时的研究学习，下面就是记录自己用普通账户安装MySQL的过程，由于没有建docker权限的组，所有命令最前面都要加sudo</p>
<h4 id="查找Docker-Hub上的MySQL镜像"><a href="#查找Docker-Hub上的MySQL镜像" class="headerlink" title="查找Docker Hub上的MySQL镜像"></a>查找Docker Hub上的MySQL镜像</h4><figure class="highlight zsh"><table><tr><td class="code"><pre><span class="line">sudo docker search mysql</span><br></pre></td></tr></table></figure>
<h4 id="拉取官方镜像"><a href="#拉取官方镜像" class="headerlink" title="拉取官方镜像"></a>拉取官方镜像</h4><figure class="highlight zsh"><table><tr><td class="code"><pre><span class="line">sudo docker pull mysql:5.7</span><br></pre></td></tr></table></figure>
<p>等下载完后，就可以在本地镜像列表里查到REPOSITORY为mysql，标签为5.7的镜像：</p>
<figure class="highlight zsh"><table><tr><td class="code"><pre><span class="line">sudo docker images | grep mysql</span><br></pre></td></tr></table></figure>
<h4 id="运行MySQL容器"><a href="#运行MySQL容器" class="headerlink" title="运行MySQL容器"></a>运行MySQL容器</h4><p>用下面的命令，可以根据Docker上的MySQL镜像实例化MySQL容器</p>
<figure class="highlight zsh"><table><tr><td class="code"><pre><span class="line">sudo docker run --name mysql-test -p 3306:3306 -v /mnt/king/mysql_custom:/etc/mysql/conf.d -v /mnt/king/mysql_5:/var/lib/mysql -v /etc/localtime:/etc/localtime -e MYSQL_ROOT_PASSWORD=mysqltest -d mysql:5.7</span><br></pre></td></tr></table></figure>
<p>命令说明：</p>
<ul>
<li>–name mysql-test: 设置容器的名称为mysql-test,<strong>注意</strong>：容器名称是唯一的；</li>
<li>-p 3306:3306: 注意里面的p是小写的，不能写成大写的，大写的意思不一样，这里将宿主机的3306端口映射到容器的3306端口，在这种情况下，会将宿主机的所有IP绑定到容器；</li>
<li>-v /mnt/king/mysql_custom:/etc/mysql/conf.d:默认情况下，MYSQL的启动配置文件是/etc/mysql/my.cnf，而/etc/mysql/conf.d目录下的存在任何.cnf格式文件时，都会使用该文件中配置项替换默认配置，因此，为了使用自定义配置，在宿主机的/mnt/king/mysql_custom目录下创建了一个配置文件，然后在创建容器时通过-v参数，以数据卷的方式将自定义配置挂载到mysql容器的/etc/mysql/conf.d目录下</li>
<li>-v /mnt/king/mysql_5:/var/lib/mysql: 首先宿主机上有/mnt/king/mysql_5目录，该命令是数据卷的挂载，表示将宿主机的/mnt/king/mysql_5目录挂载到容器内的/var/lib/mysql目录。这个目录是MySQL的默认数据目录，当使用自定义配置时，应该也做相应的修改；</li>
<li>-v /etc/localtime:/etc/localtime: 设定容器的时间与宿主机保持一致；</li>
<li>-e MYSQL_ROOT_PASSWORD=mysqltest: 设置容器的环境变量，用于设置MySQL root用户的密码，相当于在容器中 export MYSQL_ROOT_PASSWORD=mysqltest的作用；</li>
<li>-d: 告诉容器在后台运行；</li>
<li>mysql:5.7: 告诉容器运行的镜像名为mysql，标签为5.7;<h4 id="进入MySQL容器"><a href="#进入MySQL容器" class="headerlink" title="进入MySQL容器"></a>进入MySQL容器</h4><figure class="highlight zsh"><table><tr><td class="code"><pre><span class="line">sudo docker container <span class="built_in">exec</span> -it mysql-test bash</span><br></pre></td></tr></table></figure>
<h4 id="在容器内登录MySQL"><a href="#在容器内登录MySQL" class="headerlink" title="在容器内登录MySQL"></a>在容器内登录MySQL</h4><figure class="highlight zsh"><table><tr><td class="code"><pre><span class="line">mysql -u root -p mypass(不推荐这样使用，因为有安全问题)</span><br><span class="line">或者mysql -u root -p然后按照提示输入密码</span><br></pre></td></tr></table></figure>
在这里我不想用root对外，所以自己创建了一个用于开发使用的用户：<figure class="highlight zsh"><table><tr><td class="code"><pre><span class="line">CREATE USER <span class="string">'test'</span>@<span class="string">'%'</span> IDENTIFIED BY <span class="string">'test'</span>;</span><br></pre></td></tr></table></figure>
授权<figure class="highlight zsh"><table><tr><td class="code"><pre><span class="line">GRANT all PRIVILEGES on *.* to <span class="string">'test'</span>@<span class="string">'%'</span> WITH GRANT OPTION;</span><br><span class="line"></span><br><span class="line">GRANT all PRIVILEGES on *.* to root@<span class="string">'%'</span> WITH GRANT OPTION;</span><br><span class="line"></span><br><span class="line">ALTER USER <span class="string">'root'</span>@<span class="string">'%'</span> IDENTIFIED WITH mysql_native_password BY <span class="string">'mysqltest'</span>;</span><br><span class="line"></span><br><span class="line">ALTER USER <span class="string">'test'</span>@<span class="string">'%'</span> IDENTIFIED WITH mysql_native_password BY <span class="string">'test'</span>;</span><br><span class="line"></span><br><span class="line">FLUSH PRIVILEGES;</span><br></pre></td></tr></table></figure>
最后到腾讯云上的控制台的安全策略中开启3306这个端口，就可以用navicat连接MySQL了。</li>
</ul>
<h4 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h4><ul>
<li><a href="https://dev.mysql.com/doc/mysql-installation-excerpt/5.5/en/docker-mysql-getting-started.html" target="_blank" rel="noopener">MySQL官网Docker上安装MySQL指南</a></li>
<li><a href="https://blog.csdn.net/zhangxiaoyang0/article/details/85414633" target="_blank" rel="noopener">docker安装mysql使用navicat远程登录（阿里云）</a></li>
<li><a href="https://www.jianshu.com/p/e7ac0717be00" target="_blank" rel="noopener">Docker部署mysql，并配置远程连接</a></li>
<li><a href="https://itbilu.com/linux/docker/EyP7QP86M.html" target="_blank" rel="noopener">MySQL官方Docker镜像的使用</a></li>
<li><a href="https://www.jianshu.com/p/d7b9c468f20d" target="_blank" rel="noopener">MySQL创建用户与授权</a></li>
<li><a href="https://blog.csdn.net/weixin_42242494/article/details/80630267" target="_blank" rel="noopener">docker安装MySQL远程连接(阿里云服务器)</a></li>
<li><a href="https://itbilu.com/linux/docker/Ey5dT-i2G.html" target="_blank" rel="noopener">Docker网络-端口映射、容器链接、Networking</a></li>
</ul>
]]></content>
      <tags>
        <tag>docker</tag>
        <tag>mysql</tag>
      </tags>
  </entry>
</search>
